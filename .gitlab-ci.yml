image: docker:stable

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

stages:
  - identify
  - build
  - push

identify:
  image: docker:git
  stage: identify
  script:
    - git clone https://github.com/cloudflare/cloudflared.git
    - echo $(cd cloudflared && git describe --tags --always) | tee VERSION
  artifacts:
    paths:
      - VERSION

build:arm32v6:
  stage: build
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - mkdir images
  script:
    - docker build --pull --build-arg ARCH=armhf --build-arg GOARCH=arm --build-arg GOARM=6 -t "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6" .
    - docker save -o images/cloudflared-arm32v6.tar "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"
  artifacts:
    paths:
      - images

build:arm64:
  stage: build
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - mkdir images
  script:
    - docker build --pull --build-arg ARCH=arm64 --build-arg GOARCH=arm64 -t "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64" .
    - docker save -o images/cloudflared-arm64.tar "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
  artifacts:
    paths:
      - images

build:amd64:
  stage: build
  before_script:
    - mkdir images
  script:
    - docker build --pull --build-arg ARCH=amd64 --build-arg GOARCH=amd64 -t "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64" .
    - docker save -o images/cloudflared-amd64.tar "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
  artifacts:
    paths:
      - images

push:
  stage: push
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  before_script:
    - docker load -i images/cloudflared-amd64.tar
    - docker load -i images/cloudflared-arm64.tar
    - docker load -i images/cloudflared-arm32v6.tar
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
    - docker push "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
    - docker push "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"

    - docker manifest create "$CI_REGISTRY_IMAGE:latest"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"
    - docker manifest annotate --arch amd64 --os linux
        "$CI_REGISTRY_IMAGE:latest"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
    - docker manifest annotate --arch arm64 --os linux
        "$CI_REGISTRY_IMAGE:latest"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
    - docker manifest annotate --arch arm --variant v6 --os linux
        "$CI_REGISTRY_IMAGE:latest"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"

    - docker manifest create "$CI_REGISTRY_IMAGE:$(cat VERSION)"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"
    - docker manifest annotate --arch amd64 --os linux
        "$CI_REGISTRY_IMAGE:$(cat VERSION)"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-amd64"
    - docker manifest annotate --arch arm64 --os linux
        "$CI_REGISTRY_IMAGE:$(cat VERSION)"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm64"
    - docker manifest annotate --arch arm --variant v6 --os linux
        "$CI_REGISTRY_IMAGE:$(cat VERSION)"
        "$CI_REGISTRY_IMAGE:$(cat VERSION)-arm32v6"

    - docker manifest push "$CI_REGISTRY_IMAGE:$(cat VERSION)"
    - docker manifest push "$CI_REGISTRY_IMAGE:latest"
